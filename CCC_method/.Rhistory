Xa <- as.data.frame(X1Y[,10:18])
YY <- X1Y[,ny]
#if (max(as.numeric(YY) != 1)) {stop("response must be logistic")}
model <- glm(YY ~ .,  data = cbind.data.frame(YY, Xa), family = "binomial")
}
if (model == "pls") {
pena <- penalized.pls.cv(as.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), lambda = seq(-1000, 1000, 1), k=10, scale = T)
lambda <- pena$lambda.opt
ncomp <- pena$ncomp.opt
model <- penalized.pls.cv(as.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), lambda = lambda, ncomp = ncomp, k=10)
}
if (model == "lasso") {
lambda <- best.lambda(X1Y, ny=ny, alpha = 1)
model = glmnet(data.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), alpha = 1, lambda = lambda)
}
if (model == "ridge") {
lambda <- best.lambda(X1Y, ny=ny, alpha = 0)
model = glmnet(data.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), alpha = 0, lambda = lambda)
}
if (model == "b_ppls") {
pena <- ppls.splines.cv(as.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), lambda = seq(-1000, 1000, 1), k=10, scale = T, reduce.knots= TRUE)
lambda <- pena$lambda.opt
ncomp <- pena$ncomp.opt
dummy <- X2s(as.matrix(X1Y[,10.18]), reduce.knots = TRUE)
P <- Penalty.matrix(m = ncol(dummy$Z))
model <- penalized.pls.cv(as.matrix(dummy$Z), P = P, lambda = lambda, as.numeric(X1Y[,ny]), k=10)
}
return(model)
}
modelli <- list(length=length(ny))
if (is.null(models)) {
for (i in ny) {
if (i == 1 || 4 || 5 || 8 || 9 ) {model <- "logistic"
mod[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 3) {model <- "pls"
mod[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 7) {model <- "lasso"
mod[[i]] <- building(X1Y, ny = i, model = model)
}
modelli[[i]] <- mod
}
} else {model <- models
for (i in ny) {
mod[[i]] <- building(X1Y, ny = i, model = model)
}
modelli[[i]] <- mod
}
modelli <- list(length=length(ny))
if (is.null(models)) {
for (i in ny) {
if (i == 1 || 4 || 5 || 8 || 9 ) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 3) {model <- "pls"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 7) {model <- "lasso"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
} else {model <- models
for (i in ny) {
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
building <- function(X1Y, ny, model) {
if (model == "logistic") {
Xa <- as.data.frame(X1Y[,10:18])
YY <- as.numeric(X1Y[,ny])
if (max(as.numeric(YY) != 1)) {stop("response must be logistic")}
model <- glm(YY ~ .,  data = cbind.data.frame(YY, Xa), family = "binomial")
}
if (model == "pls") {
pena <- penalized.pls.cv(as.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), lambda = seq(-1000, 1000, 1), k=10, scale = T)
lambda <- pena$lambda.opt
ncomp <- pena$ncomp.opt
model <- penalized.pls.cv(as.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), lambda = lambda, ncomp = ncomp, k=10)
}
if (model == "lasso") {
lambda <- best.lambda(X1Y, ny=ny, alpha = 1)
model = glmnet(data.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), alpha = 1, lambda = lambda)
}
if (model == "ridge") {
lambda <- best.lambda(X1Y, ny=ny, alpha = 0)
model = glmnet(data.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), alpha = 0, lambda = lambda)
}
if (model == "b_ppls") {
pena <- ppls.splines.cv(as.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), lambda = seq(-1000, 1000, 1), k=10, scale = T, reduce.knots= TRUE)
lambda <- pena$lambda.opt
ncomp <- pena$ncomp.opt
dummy <- X2s(as.matrix(X1Y[,10.18]), reduce.knots = TRUE)
P <- Penalty.matrix(m = ncol(dummy$Z))
model <- penalized.pls.cv(as.matrix(dummy$Z), P = P, lambda = lambda, as.numeric(X1Y[,ny]), k=10)
}
return(model)
}
modelli <- list(length=length(ny))
if (is.null(models)) {
for (i in ny) {
if (i == 1 || 4 || 5 || 8 || 9 ) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 3) {model <- "pls"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 7) {model <- "lasso"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
} else {model <- models
for (i in ny) {
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
ny = 1
Xa <- as.data.frame(X1Y[,10:18])
YY <- as.numeric(X1Y[,ny])
if (max(as.numeric(YY) != 1)) {stop("response must be logistic")}
model <- glm(YY ~ .,  data = cbind.data.frame(YY, Xa), family = "binomial")
model
max(as.numeric(YY))
Xa <- as.data.frame(X1Y[,10:18])
YY <- as.numeric(X1Y[,ny])
#if (max(YY) != 1) {stop("response must be logistic")}
model <- glm(YY ~ .,  data = cbind.data.frame(YY, Xa), family = "binomial")
modelli <- list(length=length(ny))
if (is.null(models)) {
for (i in ny) {
if (i == 1 || 4 || 5 || 8 || 9 ) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 3) {model <- "pls"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 7) {model <- "lasso"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
} else {model <- models
for (i in ny) {
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
building <- function(X1Y, ny, model) {
if (model == "logistic") {
Xa <- as.data.frame(X1Y[,10:18])
YY <- as.numeric(X1Y[,ny])
#if (max(YY) != 1) {stop("response must be logistic")}
model <- glm(YY ~ .,  data = cbind.data.frame(YY, Xa), family = "binomial")
}
if (model == "pls") {
pena <- penalized.pls.cv(as.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), lambda = seq(-1000, 1000, 1), k=10, scale = T)
lambda <- pena$lambda.opt
ncomp <- pena$ncomp.opt
model <- penalized.pls.cv(as.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), lambda = lambda, ncomp = ncomp, k=10)
}
if (model == "lasso") {
lambda <- best.lambda(X1Y, ny=ny, alpha = 1)
model = glmnet(data.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), alpha = 1, lambda = lambda)
}
if (model == "ridge") {
lambda <- best.lambda(X1Y, ny=ny, alpha = 0)
model = glmnet(data.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), alpha = 0, lambda = lambda)
}
if (model == "b_ppls") {
pena <- ppls.splines.cv(as.matrix(X1Y[,10:18]), as.numeric(X1Y[,ny]), lambda = seq(-1000, 1000, 1), k=10, scale = T, reduce.knots= TRUE)
lambda <- pena$lambda.opt
ncomp <- pena$ncomp.opt
dummy <- X2s(as.matrix(X1Y[,10.18]), reduce.knots = TRUE)
P <- Penalty.matrix(m = ncol(dummy$Z))
model <- penalized.pls.cv(as.matrix(dummy$Z), P = P, lambda = lambda, as.numeric(X1Y[,ny]), k=10)
}
return(model)
}
modelli <- list(length=length(ny))
if (is.null(models)) {
for (i in ny) {
if (i == 1 || 4 || 5 || 8 || 9 ) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 3) {model <- "pls"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 7) {model <- "lasso"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
} else {model <- models
for (i in ny) {
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
modelli
model.building <- function(X1Y, ny = c(1,3,4,5,7,8,9), models = NULL) {
modelli <- list(length=length(ny))
if (is.null(models)) {
for (i in ny) {
if (i == 1 || 4 || 5 || 8 || 9 ) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 3) {model <- "pls"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 7) {model <- "lasso"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
} else {model <- models
for (i in ny) {
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
return(modelli)
}
models <- model.building(X1Y, ny, models)
models
i
ny
ny = c(1,3,4,5,7,8,9)
models = NULL
modelli <- list(length=length(ny))
if (is.null(models)) {
for (i in ny) {
if (i == 1 || 4 || 5 || 8 || 9 ) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 3) {model <- "pls"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 7) {model <- "lasso"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
} else {model <- models
for (i in ny) {
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
modelli <- list(length=length(ny))
if (is.null(models)) {
for (i in ny) {
if (i == 1) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 4) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 5) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 8) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 9) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 3) {model <- "pls"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 7) {model <- "lasso"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
} else {model <- models
for (i in ny) {
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
library(CCC)
data(STD_RP)
X1Y <- dataset.building(STD_RP)
models <- model.building(X1Y, ny, models)
library("CCC", lib.loc="~/R/win-library/3.2")
data(STD_RP)
X1Y <- dataset.building(STD_RP)
models <- model.building(X1Y, ny, models)
STD_RP <- read.csv(system.file("extdata", "STD_RP.csv", package = "CCC"), row.names = 1, stringsAsFactors = F)
X1Y <- dataset.building(STD_RP)
models <- model.building(X1Y, ny, models)
STD_RP <- read.csv(system.file("extdata", "STD_RP.csv", package = "CCC"), row.names = 1, stringsAsFactors = F)
X1Y <- dataset.building(STD_RP)
models <- model.building(X1Y, ny = c(1,3,4,5,7,8,9), models)
model.building <- function(X1Y, ny = c(1,3,4,5,7,8,9), models = NULL) {
modelli <- list(length=length(ny))
if (is.null(models)) {
for (i in ny) {
if (i == 1) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 4) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 5) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 8) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 9) {model <- "logistic"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 3) {model <- "pls"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
if (i == 7) {model <- "lasso"
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
} else {model <- models
for (i in ny) {
modelli[[i]] <- building(X1Y, ny = i, model = model)
}
}
return(modelli)
}
models <- model.building(X1Y, ny = c(1,3,4,5,7,8,9))
models <- model.building(X1Y, ny = c(1,3,4,5,7,8,9))
models[[1]]
models[[2]]
models[[4]]
models <- model.building(X1Y)
STD_NP <- read.csv(system.file("extdata", "STD_NP.csv", package = "CCC"), row.names = 1, stringsAsFactors = F) X1Y <- dataset.building(STD_NP)
models <- model.building(X1Y)
STD_NP <- read.csv(system.file("extdata", "STD_NP.csv", package = "CCC"), stringsAsFactors = F)
X1Y <- dataset.building(STD_NP)
models <- model.building(X1Y)
library(CCC)
STD_NP <- read.csv(system.file("extdata", "STD_NP.csv", package = "CCC"), stringsAsFactors = F)
X1Y <- dataset.building(STD_NP)
models <- model.building(X1Y)
data("peakTable")
tni <- apply.model(peakTable, polarity = "negative", models <- models)
tni[[1]]
library(CCC)
remove.packages("metfRag")
remove.packages("metfRag", library = .libPath[2])
.libPaths[2]
.libPaths
.libPaths()
.libPaths()[2]
remove.packages("metfRag", library = .libPaths()[2])
remove.packages(metfRag library = .libPaths()[2])
remove.packages(metfRag, library = .libPaths()[2])
remove.packages(metfRag)
.libPaths() <- libPaths()[2]
.libPaths() <- .libPaths()[2]
.libPaths()[1] <- .libPaths()[2]
.libPaths()
update.packages(metfRag)
update.packages("metfRag")
library(devtools)
install_github("c-ruttkies/MetFragR/metfRag")
library(metfRag)
library(devtools)
install_github("c-ruttkies/MetFragR/metfRag", force = TRUE)
library(metfRag)
library("metfRag", lib.loc="C:/Program Files/R/R-3.2.2/library")
detach("package:metfRag", unload=TRUE)
library("CCC", lib.loc="~/R/win-library/3.2")
detach("package:CCC", unload=TRUE)
library("metfRag", lib.loc="C:/Program Files/R/R-3.2.2/library")
detach("package:metfRag", unload=TRUE)
remove.packages("metfRag", lib="C:/Program Files/R/R-3.2.2/library")
.libPaths()
R_LIBS= C:/Program Files/R/R-3.2.2/library
R_LIBS= "C:/Program Files/R/R-3.2.2/library"
R_LIBS= C:/Program Files/R/R-3.2.2/library
R_LIBS= C:\Program Files\R\-3.2.2\library
R.home()
R.home(.libPaths(.libPaths()[2]))
R.home(.libPaths(.libPaths()[2]))
R_LIBS
Sys.getenv("R_LIBS_USER")
.libPaths()
Sys.getenv("R_LIBS_USER") <- "C:/Program Files/R/R-3.2.2/library"
Sys.getenv()
Sys.getenv("R_LIBS_USER")
?Sys.getenv
.libPaths()
Sys.setenv("R_LIBS_USER", "C:/Program Files/R/R-3.2.2/library")
Sys.setenv("R_LIBS_USER")
Sys.setenv("R_LIBS_USER", "C:/Program Files/R/R-3.2.2/library")
ah <- "C:/Program Files/R/R-3.2.2/library"
Sys.setenv("R_LIBS_USER", ah)
Sys.getenv()
library(CCC)
library("CCC", lib.loc="C:/Program Files/R/R-3.3.0/library")
detach("package:CCC", unload=TRUE)
library("devtools", lib.loc="C:/Program Files/R/R-3.3.0/library")
remove.packages("metfRag")
install_github("c-ruttkies/MetFragR/metfRag", args="--no-multiarch")
data(peakTable)
library("CCC", lib.loc="C:/Program Files/R/R-3.3.0/library")
tni <- apply.model(peakTable, polarity = "negative")
ps_spectra <- ps_spec(tni, peakTable)
get.low.var <- function(peakTable){
require(modeest)
threshold <- 1000
colli <- str_sub(colnames(peakTable), start = 6L, end = 11L)
collis <- str_detect(colli, pattern="_S")
coll <- colli[collis]
coll <- str_replace(coll, pattern = "_", replacement = ".")
pea <- peakTable[, collis]
pee <- peakTable[,1:8]
peaktaba <- apply(pea, 1, function(x) max(x))
thre <- which(peaktaba >= threshold)
pea <- pea[thre,]
pee <- pee[thre,]
colnames(pea) <- coll
ac <- apply(pea, 2, mean)
incl <- which(ac >= quantile(ac, prob=0.05))
pea <- pea[,incl]
vari <- apply(pea, 1, var)
devst <- sqrt(vari)
maxi <- apply(pea, 1, function(x) max(x))
meani <- apply(pea, 1, mean)
medi <- apply(pea, 1, median)
nonp_skew <- (medi-meani)/devst
moda <- apply(pea, 1, mlv,  method = "mfv")
modas <- sapply(rep(1:length(moda)), function(i) drop(moda[[i]][[1]]))
skew <- sapply(rep(1:length(moda)), function(i) drop(moda[[i]][[2]]))
quan <- apply(pea, 1, function(x) quantile(x, prob = c(0.1, 0.9)))
quani <- quan[2,] - quan[1,]
ratio <- quani/maxi
var.coef <- devst/meani
peaktab <- cbind(pee, pea, devst, ratio, nonp_skew, modas, skew, var.coef)
selection <- peaktab[peaktab$modas >= 500 & peaktab$ratio >= 0.3 & peaktab$skew >= -0.5 & peaktab$var.coef <= 0.5 & peaktab$skew <=0.5,]
write.csv(selection, file="peaktab_RPneg.csv")
spectras = list()
for (i in c(as.factor(selection$pcgroup))) {
mzs <- peakTable[peakTable$pcgroup == i, "mz"]
int <- rowSums(peakTable[peakTable$pcgroup == i, 9:(ncol(peakTable))])
spectra <- cbind(mzs, int, i)
spectras[[i]] <- spectra
}
spectras <- do.call(rbind, spectras)
write.csv(spectras, file= "spectras_RPneg.csv")
markers <- row.names(selection)
return(markers)
}
ab <- get.low.var(peakTable = )
ab <- get.low.var(peakTable)
require(chemhelper)
require(stringr)
peakTable <- metaMS.set$PeakTable
ord <- order(peakTable$mz)
peakTable <- peakTable[ord,]
row.names(peakTable) <- 1: nrow(peakTable)
STD_RP <- read.csv("H:/R/STD_RP.csv", stringsAsFactors=FALSE)
load("H:/R/R stuff/short_rts.Rdata")
mzs <- as.numeric(STD_RP$MM + 1.0078)
RTS <- as.numeric(STD_RP$RT)
lo <- RTS
RT.est <- RT.est <- predict(shrts, newdata = data.frame(lo), interval = c("confidence"), level = 0.95)
RTS <- as.numeric(RT.est[,1])
nam <- db.comp.assign(mz = as.numeric(peakTable$mz),rt = as.numeric(peakTable$rt),
comp_name_db = STD_RP$compound, mz_db = mzs, rt_db = RTS, mzabs=0.01,ppm=20,ret_tol=1.5)
peakTable <- cbind(nam, peakTable)
sicuri <- intersect(peakTable$nam, peakTable$compound)
remove.packages("mzR")
source("https://bioconductor.org/biocLite.R")
biocLite("mzR")
source("https://bioconductor.org/biocLite.R")
biocLite("mzR")
remove.packages("BiocInstaller")
bin.model.CO <- load(system.file("extdata", "bin.model.acid.rda", package = "CCC"))
library(CCC)
bin.model.CO <- load(system.file("extdata", "bin.model.acid.rda", package = "CCC"))
load(system.file("extdata", "bin.model.acid.rda", package = "CCC"))
load(system.file("extdata", "bin.model.acid.rda", package = "CCC"))
load(system.file("extdata","bin.model.NN.rda", package ="CCC"))
load(system.file("extdata","bin.model.SS.rda", package ="CCC"))
load(system.file("extdata","bin.model.bs.rda", package ="CCC"))
load(system.file("extdata","bin.model.CO.rda", package ="CCC"))
load(system.file("extdata","lasso.md.CO.rda", package ="CCC"))
load(system.file("extdata","lasso.md.aliph.rda", package ="CCC"))
load(system.file("extdata","pls.md.SS.rda", package ="CCC"))
load(system.file("extdata","pls.md.phenolics.rda", package ="CCC"))
library(CCC)
data(peakTable)
tni <- apply.model(peakTable, polarity = "negative")
library(CCC)
data(peakTable)
tni <- apply.model(peakTable, polarity = "negative")
tni[[1]]
View(peakTable)
which(!is.null(peakTable$ChemSpiderID))
which(!is.null(peakTable$compound))
ord <- order(peakTable$compound)
peakTable <- (peakTable[ord,])
ord <- order(-peakTable$compound)
ord <- order(peakTable[[-"compound"]])
ord <- order(peakTable[["compound"]])
peakTable <- (peakTable[-ord,])
data(peakTable)
write.csv(peakTable, file = "peakTable.csv")
library(CCC)
short <- 60
max(short <= 30)
max(short) <= 30
data(peakTable)
if (str_detect(tail(colnames(peakTable), n = 1L), coll("RP")) & (max(peakTable$rt) <= 30))
{
load(system.file("extdata", "rts.lm.rda", package = "CCC"))
}
if (str_detect(tail(colnames(peakTable), n = 1L), coll("RP")) & (max(short) <= 30)) {load(system.file("extdata", "rts.lm.rda", package = "CCC"))}
if (str_detect(tail(colnames(peakTable), n = 1L), coll("RP")) & (max(short) <= 30)) {load(system.file("extdata", "rts.lm.rda", package = "CCC"))}
short = 20
if (str_detect(tail(colnames(peakTable), n = 1L), coll("RP")) & (max(short) <= 30)) {load(system.file("extdata", "rts.lm.rda", package = "CCC"))}
str_detect(tail(colnames(peakTable), n = 1L), coll("RP"))
