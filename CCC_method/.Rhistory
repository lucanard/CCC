xlo <- xlogp.real^2
plot(xlo, rts)
rti <- rts^2
plot(xlo, rts)
plot(xlogp.real, rti)
model <- lm(rti ~ poly(xlogp.real,2))
plot(rti~xlogp.real)
points(xlogp.real, fitted(model), col='red', pch=20)
model <- lm(rti ~ xlogp.real)
plot(rti~xlogp.real)
points(xlogp.real, fitted(model), col='red', pch=20)
plot(xlogp.real, rts)
model <- lm(rts ~ poly(xlogp.real, 2))
plot(rts~xlogp.real)
points(xlogp.real, fitted(model), col='red', pch=20)
x <- xlogp.real
y <- rts
model <- lm(y ~ poly(x, 2))
plot(y~x)
points(x, fitted(model), col='red', pch=20)
plot(model$residuals)
mean(model$residuals)
mean(abs(model$residuals))
max(abs(model$residuals))
quantile(abs(model$residuals))
which(max(abs(model$residuals)))
which.max(abs(model$residuals))
x[82]
View(FinSTD)
View(FinSTD)
x[81]
model <- lm(y ~ poly(x, 2))
xlogp.real <- xlogp[which(!is.na(FinSTD$RT))]
xlogp.pred <- xlogp[which(is.na(FinSTD$RT))]
plot(xlogp.real, rts)
x <- xlogp.real
y <- rts
model <- lm(y ~ poly(x, 2))
plot(y~x)
points(x, fitted(model), col='red', pch=20)
fit <- lm(y ~ poly(x, 2))
plot(y~x)
points(x, fitted(model), col='red', pch=20)
lines(sort(x), fitted(fit)[order(x)], col='red', type='b')
plot(y~x)
lines(sort(x), fitted(fit)[order(x)], col='red', type='b')
y <- predict(model, newdata = x)
class(xlogp.pred)
?predict
xlogp.real <- xlogp[which(!is.na(FinSTD$RT))]
xlogp.pred <- xlogp[which(is.na(FinSTD$RT))]
plot(xlogp.real, rts)
x <- xlogp.real
y <- rts
fit <- lm(y ~ poly(x, 2))
plot(y~x)
lines(sort(x), fitted(fit)[order(x)], col='red', type='b')
YY <- predict(fit, newdata = xlog.pred)
YY <- predict(fit, newdata = xlogp.pred)
xx <- data.frame(xlogp.pred)
YY <- predict(fit, newdata = xx)
YY
plot(YY)
x <- data.frame(xlogp.real)
y <- rts
fit <- lm(y ~ poly(x, 2))
plot(y~x)
lines(sort(x), fitted(fit)[order(x)], col='red', type='b')
xx <- data.frame(xlogp.pred)
YY <- predict(fit, newdata = xx)
x <- xlogp.real
y <- rts
fit <- lm(y ~ poly(x, 2))
plot(y~x)
lines(sort(x), fitted(fit)[order(x)], col='red', type='b')
xx <- data.frame(xlogp.pred)
YY <- predict(fit, newdata = xx)
View(YY)
xlogp.real
View(xlogp.real)
class(xlogp.real)
x <- drop(xlogp.real)
y <- rts
fit <- lm(y ~ poly(x, 2))
plot(y~x)
lines(sort(x), fitted(fit)[order(x)], col='red', type='b')
xx <- data.frame(xlogp.pred)
YY <- predict(fit, newdata = xx)
length(YY)
names(xlogp.real) <- NULL
plot(xlogp.real, rts)
x <- drop(xlogp.real)
y <- rts
fit <- lm(y ~ poly(x, 2))
plot(y~x)
lines(sort(x), fitted(fit)[order(x)], col='red', type='b')
names(xlogp.real) <- NULL
names(xlogp.pred) <- NULL
plot(xlogp.real, rts)
x <- drop(xlogp.real)
y <- rts
fit <- lm(y ~ poly(x, 2))
plot(y~x)
lines(sort(x), fitted(fit)[order(x)], col='red', type='b')
xx <- data.frame(xlogp.pred)
YY <- predict(fit, newdata = xx)
x <- data.frame(xlogp.pred)
YY <- predict(fit, newdata = x)
x <- xlogp.pred
YY <- predict(fit, newdata = x)
class(x)
plot(xlogp.real, rts)
logpx <- drop(xlogp.real)
rtsy <- rts
fit <- lm(rtsy ~ poly(logpx, 2))
plot(rtsy~logpx)
lines(sort(logpx), fitted(fit)[order(logpx)], col='red', type='b')
logpx <- data.frame(xlogp.pred)
YY <- predict(fit, newdata = logpx)
logpx
View(logpx)
names(logpx) <- logpx
YY <- predict(fit, newdata = logpx)
names(logpx) <- "logpx"
YY <- predict(fit, newdata = logpx$logpx)
YY <- predict(fit, newdata = logpx)
length(YY)
plot(YY)
RTs <- predict(fit, newdata = logpx)
plot(RTs)
which(RTs <= 0)
which(RTs >= 63)
which(RTs >= 63) <- 63
STD_RP <- read.csv("H:/R/CCC/CCC_method/data/STD_RP.csv", row.names=1, stringsAsFactors=FALSE)
View(STD_RP)
save(STD_RP, file="STD_RP.Rdata")
STD_RP <- data(STD_RP.Rdata)
#' X1Y <- dataset.building(STD_RP)
STD_RP <- data(STD_RP.Rdata)
X1Y <- dataset.building(STD_RP)
library("CCC", lib.loc="C:/Program Files/R/R-3.2.2/library")
STD_RP <- data(STD_RP.Rdata)
X1Y <- dataset.building(STD_RP)
View(STD_RP)
load("H:/R/CCC/CCC_method/data/STD_RP.Rdata")
View(STD_RP)
library("devtools", lib.loc="C:/Program Files/R/R-3.2.2/library")
use_data(STD_RP)
data(STD_RP)
X1Y <- dataset.building(STD_RP)
is.odd <- function(x) x %% 2 != 0
Pyri = "c1ccncc1"
Pyrr = "c1cc[nH]c1"
fur = "c1ccoc1"
ncyc = "c1cncn1"
query <- 'c1ccccc1'
query1 <- "OCC(O)CO"
query2 <- "O=CO"
sdfset <- smiles2sdf(c(Pyri, Pyrr, fur, ncyc))
sdfset@ID <- c("Pyri", "Pyrr", "fur", "ncyc")
RT <- as.numeric(x[["RT"]])
mass <- as.numeric(x[["MM"]])
comp <- str_replace(x[["Formula"]], pattern ="C", replacement = "")
com <- str_split(comp, pattern = "H", n = Inf)
nC <- sapply(com, function(x) drop(as.numeric(x[1])))
nC[is.na(nC)] <- 1
data(STD_RP)
class(STD_RP)
View(STD_RP)
load("H:/R/CCC/CCC_method/data/STD_RP.Rdata")
write.csv(STD_RP, file = "STD_RP.csv")
STD_RP <- read.csv("H:/R/CCC/CCC_method/STD_RP.csv", row.names=1, stringsAsFactors=FALSE)
View(STD_RP)
use_data(STD_RP)
use_data(STD_RP, overwrite = TRUE)
data(STD_RP)
class(STD_RP)
as.numeric(STD_RP[["RT"]])
STD_RP <- read.csv("H:/R/CCC/CCC_method/STD_RP.csv", row.names=1, stringsAsFactors=FALSE)
use_data_raw(STD_RP, overwrite = TRUE)
use_data_raw(STD_RP)
use_data_raw("STD_RP")
use_data_raw(STD_RP)
use_data_raw(pkg = ".")
use_data(STD_RP, overwrite = TRUE)
data(STD_RP)
class(STD_RP)
use_data_raw(pkg = "CCC")
load("H:/R/CCC/CCC_method/data/STD_RP.Rdata")
save(STD_RP, file = "STD_RP.Rda")
data(STD_RP)
class(STD_RP)
View(STD_RP)
load("H:/R/CCC/CCC_method/data/STD_RP.Rdata")
library("devtools", lib.loc="C:/Program Files/R/R-3.2.2/library")
library(devtools)
install_github("c-ruttkies/MetFragR/metfRag")
remove.packages("metfRag")
library(devtools)
install_github("c-ruttkies/MetFragR/metfRag")
library("metfRag", lib.loc="C:/Program Files/R/R-3.2.2/library")
detach("package:metfRag", unload=TRUE)
remove.packages("metfRag")
install_github("c-ruttkies/MetFragR/metfRag")
update_packages(pkgs = "metfRag", repos = getOption("repos"),
type = getOption("pkgType"))
update_packages(pkgs = "metfRag", repos = getOption("repos"),
type = getOption("pkgType"))
update_packages(pkgs = "metfRag")
install.packages("metfRag",repos=NULL,type="source")
library(metfRag)
install.packages("metfRag",repos=NULL,type="source")
remove.packages(metfRag)
remove.packages("metfRag")
install.packages("metfRag",repos=NULL,type="source")
library(devtools)
install_github("c-ruttkies/MetFragR/metfRag")
library(metfRag)
.libPaths()
remove.packages("metfRag")
remove.packages("metfRag", library = "C:\\Program Files\\R\\R-3.2.2")
remove.packages("metfRag", lib = "C:\\Program Files\\R\\R-3.2.2")
library("metfRag", lib.loc="C:/Program Files/R/R-3.2.2/library")
remove.packages("metfRag", lib="C:/Program Files/R/R-3.2.2/library")
library(devtools)
install_github("c-ruttkies/MetFragR/metfRag")
library("metfRAG")
library("metfRag")
library("metfRag")
library("CCC", lib.loc="C:/Program Files/R/R-3.2.2/library")
remove.packages(metfRag)
remove.packages("metfRag")
library("devtools", lib.loc="C:/Program Files/R/R-3.2.2/library")
.libPaths( c( .libPaths(), "~/userLibrary") )
.libPaths()
?.libPaths
help(.libPaths)
install_github("c-ruttkies/MetFragR/metfRag")
.Rprofile
.Rprofile(
)
remove.packages("metfRag", lib="C:/Program Files/R/R-3.2.2/library")
.libPaths("C:/Program Files/R/R-3.2.2")
install_github("c-ruttkies/MetFragR/metfRag")
install_github("c-ruttkies/MetFragR/metfRag", force = TRUE)
remove.packages("metfRag", lib="C:/Program Files/R/R-3.2.2/library")
library("metfRag")
install_github("c-ruttkies/MetFragR/metfRag")
library("devtools", lib.loc="C:/Program Files/R/R-3.2.2/library")
install_github("c-ruttkies/MetFragR/metfRag")
library("metfRag", lib.loc="~/R/win-library/3.2")
detach("package:metfRag", unload=TRUE)
remove.packages("metfRag", lib="~/R/win-library/3.2")
library("metfRag", lib.loc="~/R/win-library/3.2")
detach("package:metfRag", unload=TRUE)
remove.packages("metfRag", lib="~/R/win-library/3.2")
remove.packages("metfRag")
.libPaths("C:/Program Files/R/R-3.2.2")
remove.packages("metfRag")
.libPaths()
install_github("c-ruttkies/MetFragR/metfRag")
remove.packages("metfRag", lib="~/R/win-library/3.2")
.libPaths()
.libPaths("C:/Program Files/R/R-3.2.2/library")
library("devtools")
install_github("c-ruttkies/MetFragR/metfRag")
library("metfRag", lib.loc="C:/Program Files/R/R-3.2.2/library")
detach("package:metfRag", unload=TRUE)
library("devtools", lib.loc="C:/Program Files/R/R-3.2.2/library")
use_data_raw(".")
load("H:/R/CCC/CCC_method/data/lin.numC.RData")
use_data(lin.numC)
library("CCC", lib.loc="C:/Program Files/R/R-3.2.2/library")
data("lin.numC")
data("STD_RP")
class(STD_RP)
data("STD_LP")
class(STD_LP)
load("H:/R/CCC/CCC_method/data/models.RData")
use_data(bin.model.acid)
use_data(bin.model.bs)
use_data(bin.model.CO)
use_data(bin.model.NN)
use_data(bin.model.SS)
use_data(lasso.md.aliph)
use_data(lasso.md.CO)
use_data(pls.md.phenolics)
use_data(pls.md.SS)
load("H:/R/CCC/CCC_method/data/FinSTD.Rdata")
use_data(FinSTD)
library(CCC)
STD_RP <- data(STD_RP)
X1Y <- dataset.building(STD_RP)
options(warnings = F)
library(CCC)
data(STD_RP)
X1Y <- dataset.building(STD_RP)
data(STD_RP)
X1Y <- dataset.building(STD_RP)
library(CCC)
STD_RP <- data(STD_RP)
<- dataset.building(STD_RP)
STD_RP <- data(STD_RP)
X1Y <- dataset.building(STD_RP)
STD_RP <- data(STD_RP)
X1Y <- dataset.building(STD_RP)
library("devtools", lib.loc="C:/Program Files/R/R-3.2.2/library")
library(CCC)
system.file("extdata", "STD_RP.csv", package = "CCC")
system.file("extdata", "STD_RP.csv", package = "CCC")
STD_RP <- read.csv("H:/R/CCC/CCC_method/inst/extdata/STD_RP.csv", row.names=1, stringsAsFactors=FALSE)
View(STD_RP)
use_data_raw(".")
use_data(STD_RP)
library(CCC)
load("H:/R/CCC/CCC_method/data/STD_RP.rda")
data(STD_RP)
View(STD_RP)
?data
library(CCC)
data(STD_RP)
class(STD_RP)
read.csv(STD_RP)
read.csv(STD_RP.csv)
data(read.csv("STD_RP.csv"))
read.csv("STD_RP.csv")
load("H:/R/CCC/CCC_method/data/STD_RP.rda")
load("H:/R/CCC/CCC_method/data/STD_RP.csv")
STD_RP <- read.csv("H:/R/CCC/pippo/data/STD_RP.csv", row.names=1, stringsAsFactors=FALSE)
View(STD_RP)
save(STD_RP, compress = F, eval.promises = F, file = "STD_RP.rda")
data("STD_RP")
View(STD_RP)
library(CCC)
load("H:/R/CCC/CCC_method/data/STD_RP.rda")
library(CCC)
data("STD_RP", lib.loc = "CCC")
library("CCC", lib.loc="~/R/win-library/3.2")
data("STD_RP", lib.loc = "CCC")
data("STD_RP", lib.loc = "~/R/win-library/3.2")
View(STD_RP)
remove.packages("CCC", lib="~/R/win-library/3.2")
.libpath("C:/Program Files/R/R-3.2.2/library")
.libpaths("C:/Program Files/R/R-3.2.2/library")
.libPaths("C:/Program Files/R/R-3.2.2/library")
.libPaths()
library(CCC)
data("STD_RP")
View(STD_RP)
STD_RP <- data(STD_RP)
X1Y <- dataset.building(STD_RP)
STD_RP <- data("STD_RP")
X1Y <- dataset.building(STD_RP)
STD_RP <- data("STD_RP")
View(STD_RP)
data("STD_RP")
> View(STD_RP)
X1Y <- dataset.building(STD_RP)
View(X1Y)
load("H:/progetto Garniga/risultati/ERBA/RP/Grass_GAR_RP_neg.RData")
peakTable <- metaMS.set$PeakTable
load("H:/progetto Garniga/risultati/Essudato analisi R/eesudato_RPneg.Rdata")
peakTable <- metaMS.set$PeakTable
library("devtools", lib.loc="C:/Program Files/R/R-3.2.2/library")
use_data_raw("")
use_data_raw(".")
use_data(peakTable)
load("H:/R/CCC/CCC_method/data/peakTable.rda")
data(peakTable)
data("peakTable")
peaky <- peakTable[which(any(peakTable[,8:ncol(peakTable)]) >= 500)
)
peaky <- peakTable[which(any(peakTable[,8:ncol(peakTable)])) >= 500,]
peaky <- peakTable[which.max(peakTable[,8:ncol(peakTable)]) >= 500,]
which.max(peakTable[1,]) >=500
which.max(peakTable[3,]) >=500
View(peakTable)
which.max(peakTable[,8:ncol(peakTable)]) >=500
which.max(peakTable[,8:ncol(peakTable)] >=500)
maxi <- max(peakTable[,8:ncol(peakTable)])
peakTable[, "max"] <- apply(peakTable[, 8:ncol(peakTable)], 1, max)
peaky <- peakTable[peakTable$max >= 500]
peaky <- peakTable[peakTable$max >= 500,]
View(peaky)
peaky$max <- NULL
peakTable <- peaky
use_data(peakTable)
use_data(peakTable, ovwerwrite = TRUE)
use_data(peakTable, overwrite = TRUE)
library(CCC)
warnings
warnings()
data(peakTable)
model <- apply.model(peakTable, polarity = "negative")
library("CCC", lib.loc="C:/Program Files/R/R-3.2.2/library")
data(peakTable)
model <- apply.model(peakTable, polarity = "negative")
apply.model(peakTable, polarity = "negative")
library(CCC)
model <- apply.model(peakTable, polarity = "negative")
class(peakTable)
class(peakTable$A002_S1D2_RP_neg01)
class(peakTable$ChemSpiderID)
model <- apply.model(peakTable = peakTable, polarity = "negative")
data("peakTable")
model <- apply.model(peakTable = peakTable, polarity = "negative")
traceback()
traceback()
ab <- apply(peakTable, 2, is.numeric)
ab
is.numeric(peakTable$pcgroup)
is.numeric(peakTable$ChemSpiderID)
is.numeric(peakTable$compound)
is.numeric(peakTable$isotopes)
is.numeric(peakTable$A002_S1D2_RP_neg01)
is.numeric(peakTable$mz)
is.numeric(peakTable$rt)
ab <- apply(peakTable, 2, is.numeric)
ab
data("peakTable")
sapply(peakTable, mode)
model <- apply.model(peakTable, polarity = "negative")
library("CCC", lib.loc="C:/Program Files/R/R-3.2.2/library")
model <- apply.model(peakTable, polarity = "negative")
peaky <- sapply(peakTable, as.numeric)
sapply(peakTable, class)
sapply(peakTable, mode)
temp <- peakTable$isotopes == ""
temp2 <- peakTable[which(temp == F), ]
temp3 <- str_split(temp2$isotopes, coll("]["))
temp3 <- do.call(rbind, temp3)
temp3 <- cbind(str_replace(temp3[,1], coll("["), replacement = ""), temp3[,2])
temp3 <- as.data.frame(temp3)
temp3[,3] <- row.names(temp2)
temp4 <- temp3[order(temp3[,1], temp3[,2]),]
temp4 <- as.list(split(as.numeric(temp4[,3]), f = temp4[,1]))
iso_groups <- temp4
load("H:/progetto Garniga/risultati/Essudato analisi R/eesudato_RPneg.Rdata")
peakTable <- metaMS.set$PeakTable
sapply(peakTable, mode)
sapply(peakTable, class)
model <- apply.model(peakTable, polarity = "negative")
data(rts.lm)
model <- apply.model(peakTable, polarity = "negative")
library(CCC)
model <- apply.model(peakTable, polarity = "negative")
library(CCC)
model <- apply.model(peakTable, polarity = "negative")
peaky <- sample(peakTable, 2000)
peaky <- sample(peakTable, 1, 2000)
peaky <- sample(peakTable, 2000, 1)
peaky <- subset(peakTable, 2000, 1)
peaky <- subset(peakTable, 1, 2000)
?subset
peaky <- subset(peakTable, subset = 2000)
peaky <- subset(peakTable, subset = 1:2000)
peaky <- peakTable[1:2000,]
model <- apply.model(peaky, polarity = "negative")
library("CCC", lib.loc="C:/Program Files/R/R-3.2.2/library")
detach("package:CCC", unload=TRUE)
library("CCC", lib.loc="C:/Program Files/R/R-3.2.2/library")
model <- apply.model(peaky, polarity = "negative")
library("CCC", lib.loc="C:/Program Files/R/R-3.2.2/library")
data("peakTable")
peakTable <- peakTable[1:2000, ]
library(devtools)
use_data(peakTable)
use_data(peakTable, overwrite = TRUE)
model <- apply.model(peakTable, polarity = "negative")
sapply(peakTable, mode)
mode(peakTable)
class(peakTable)
data("peakTable")
load("H:/progetto Garniga/risultati/Essudato analisi R/eesudato_RPneg.Rdata")
peakTable <- metaMS.set$PeakTable
peakTable <- peakTable[1.2000, ]
peakTable <- metaMS.set$PeakTable
peakTable <- peakTable[1:2000, ]
use_data_raw(".")
library(devtools)
use_data_raw(".")
use_data(peakTable)
library(CCC)
library(devtools)
data("bin.model.bs")
data("bin.model.CO")
data("bin.model.acid")
data("bin.model.NN")
data("bin.model.SS")
use_data(bin.model.acid, internal = TRUE, overwrite = TRUE)
use_data(bin.model.bs, internal = TRUE, overwrite = TRUE)
use_data(bin.model.CO, internal = TRUE, overwrite = TRUE)
use_data(bin.model.NN, internal = TRUE, overwrite = TRUE)
use_data(bin.model.SS, internal = TRUE, overwrite = TRUE)
data("lasso.md.aliph")
data("lasso.md.CO")
use_data(lasso.md.aliph, internal = TRUE, overwrite = TRUE)
use_data(lasso.md.CO, internal = TRUE, overwrite = TRUE)
data("pls.md.phenolics")
data("pls.md.SS")
use_data(pls.md.phenolics, internal = TRUE, overwrite = TRUE)
use_data(pls.md.SS, internal = TRUE, overwrite = TRUE)
library(CCC)
data("lin.numC")
data("rts.lm")
use_data(lin.numC, internal = TRUE, overwrite = TRUE)
use_data(rts.lm, internal = TRUE, overwrite = TRUE)
library(CCC)
library("CCC", lib.loc="~/R/win-library/3.2")
data("bin.model.CO")
detach("package:CCC", unload=TRUE)
data("bin.model.bs")
